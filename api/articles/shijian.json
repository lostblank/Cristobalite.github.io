{"title":"事件","uid":"9dbfb0ceb333a8d9adfdccfe0f20148d","slug":"shijian","date":"2024-01-28T13:28:20.000Z","updated":"2024-02-07T08:49:52.901Z","comments":true,"path":"api/articles/shijian.json","keywords":null,"cover":"https://s2.loli.net/2024/01/30/YaNjJU3yVDiXbsw.png","content":"<h1 id=\"事件\"><a href=\"#事件\" class=\"headerlink\" title=\"事件\"></a>事件</h1><ol>\n<li><h3 id=\"定义\"><a href=\"#定义\" class=\"headerlink\" title=\"定义\"></a>定义</h3><ul>\n<li>Event，事件，即 能够发生什么的什么事情</li>\n</ul>\n</li>\n<li><h3 id=\"角色\"><a href=\"#角色\" class=\"headerlink\" title=\"角色\"></a>角色</h3><ul>\n<li>事件是一种使对象或类能够提供通知的成员</li>\n<li>对象x拥有一个事件y ，想表达的思想是 ： 当事件y发生时，x有能力通知别的对象</li>\n</ul>\n</li>\n<li><h3 id=\"使用：用于对象或类间的动作协调与信息传递（消息推送）\"><a href=\"#使用：用于对象或类间的动作协调与信息传递（消息推送）\" class=\"headerlink\" title=\"使用：用于对象或类间的动作协调与信息传递（消息推送）\"></a>使用：用于对象或类间的动作协调与信息传递（消息推送）</h3></li>\n<li><h3 id=\"原理：事件模型（event-model）中的两个-5\"><a href=\"#原理：事件模型（event-model）中的两个-5\" class=\"headerlink\" title=\"原理：事件模型（event model）中的两个 5\"></a>原理：事件模型（event model）中的两个 5</h3><ul>\n<li>发生——响应中的五个部分——闹钟响了你起床、孩子饿了你做饭。。。这里隐含这 订阅 关系</li>\n<li>发生——响应中的五个动作：<ol>\n<li>我有一个事件</li>\n<li>一个人或者一群人关心我这个事件</li>\n<li>我的这个事件发生了</li>\n<li>关心这个事件的人会被依次通知到</li>\n<li>被通知到的人根据拿到的事件信息（又称事件数据、事件参数、通知）对事件进行响应（又称 处理事件）</li>\n</ol>\n</li>\n<li>事件订阅者、事件参数</li>\n</ul>\n</li>\n<li><h3 id=\"提示\"><a href=\"#提示\" class=\"headerlink\" title=\"提示\"></a>提示</h3><ul>\n<li>事件多用于桌面、手机等开发的客户端编程、因为这些程序经常是用户通过事件来驱动的</li>\n<li>各种编程语言对这个机制的实现方法也不尽相同</li>\n<li>Java里面没有事件这种成员，也没有委托这种数据类型，Java的事件是通过接口来实现的</li>\n<li>MVC、MVP、MVVM等模式是事件模式更高级、更有效的玩法</li>\n<li>日常开发的时候，使用已有时间的机会比较多，自己声明事件的机会比较少</li>\n<li>事件的功能&#x3D;通知+可选的事件参数（即详细信息）</li>\n</ul>\n</li>\n</ol>\n<h1 id=\"事件的应用\"><a href=\"#事件的应用\" class=\"headerlink\" title=\"事件的应用\"></a>事件的应用</h1><ul>\n<li><h3 id=\"实例演示\"><a href=\"#实例演示\" class=\"headerlink\" title=\"实例演示\"></a>实例演示</h3><ul>\n<li>派生（继承）与扩展（extends）</li>\n</ul>\n<figure class=\"highlight c#\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">using</span> System;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System.Collections.Generic;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System.Linq;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System.Text;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System.Threading.Tasks;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System.Windows.Forms;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">namespace</span> <span class=\"title\">Event</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">class</span> <span class=\"title\">Program</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">Main</span>(<span class=\"params\"><span class=\"built_in\">string</span>[] args</span>)</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 创建 MyForm 对象</span></span><br><span class=\"line\">            MyForm form = <span class=\"keyword\">new</span> MyForm();</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">// 订阅 Click 事件，当窗体单击时，调用 FormClicked 方法</span></span><br><span class=\"line\">            form.Click += form.FormClicked;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">// 显示窗体</span></span><br><span class=\"line\">            form.ShowDialog();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 自定义窗体类，继承自 Form</span></span><br><span class=\"line\">        <span class=\"keyword\">class</span> <span class=\"title\">MyForm</span> : <span class=\"title\">Form</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 事件处理方法，当窗体被单击时调用</span></span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">internal</span> <span class=\"keyword\">void</span> <span class=\"title\">FormClicked</span>(<span class=\"params\"><span class=\"built_in\">object</span> sender, EventArgs e</span>)</span></span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"comment\">// 将当前时间设置为窗体标题</span></span><br><span class=\"line\">                <span class=\"keyword\">this</span>.Text = DateTime.Now.ToString();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></li>\n</ul>\n<ul>\n<li><h3 id=\"事件模型的五个组成部分\"><a href=\"#事件模型的五个组成部分\" class=\"headerlink\" title=\"事件模型的五个组成部分\"></a>事件模型的五个组成部分</h3><ol>\n<li>事件的拥有者（event source，对象）</li>\n<li>事件的成员（event ，成员）</li>\n<li>事件的响应者（event subscriber,对象）</li>\n<li>事件处理器（event handler,成员）——本质上是一个回调方法</li>\n<li>事件订阅器——把事件处理器与事件关联在一起，本质上是一种以委托类型为基础的“约定”</li>\n</ol>\n</li>\n<li><h3 id=\"注意\"><a href=\"#注意\" class=\"headerlink\" title=\"注意\"></a>注意</h3><ul>\n<li>事件处理器是方法成员</li>\n<li>挂接事件处理器的时候，可以使用委托实例，也可以直接使用方法名，这是个语法糖</li>\n<li>事件处理器对事件的订阅不是随意的，匹配与否声明事件时所使用的委托类型来检测</li>\n<li>事件可以同步调用也可以异步调用</li>\n<li>事件不会主动发生，一定是由事件拥有者的内部逻辑所触发的</li>\n</ul>\n</li>\n</ul>\n","feature":true,"text":"事件 定义 Event，事件，即 能够发生什么的什么事情 角色 事件是一种使对象或类能够提供通知的成员 对象x拥有一个事件y ，想表达的思想是 ： 当事件y发生...","permalink":"/post/shijian","photos":[],"count_time":{"symbolsCount":"1.7k","symbolsTime":"2 mins."},"categories":[{"name":"编程","slug":"编程","count":3,"path":"api/categories/编程.json"}],"tags":[{"name":"C#","slug":"C","count":3,"path":"api/tags/C.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E4%BA%8B%E4%BB%B6\"><span class=\"toc-text\">事件</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%AE%9A%E4%B9%89\"><span class=\"toc-text\">定义</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E8%A7%92%E8%89%B2\"><span class=\"toc-text\">角色</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E4%BD%BF%E7%94%A8%EF%BC%9A%E7%94%A8%E4%BA%8E%E5%AF%B9%E8%B1%A1%E6%88%96%E7%B1%BB%E9%97%B4%E7%9A%84%E5%8A%A8%E4%BD%9C%E5%8D%8F%E8%B0%83%E4%B8%8E%E4%BF%A1%E6%81%AF%E4%BC%A0%E9%80%92%EF%BC%88%E6%B6%88%E6%81%AF%E6%8E%A8%E9%80%81%EF%BC%89\"><span class=\"toc-text\">使用：用于对象或类间的动作协调与信息传递（消息推送）</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%8E%9F%E7%90%86%EF%BC%9A%E4%BA%8B%E4%BB%B6%E6%A8%A1%E5%9E%8B%EF%BC%88event-model%EF%BC%89%E4%B8%AD%E7%9A%84%E4%B8%A4%E4%B8%AA-5\"><span class=\"toc-text\">原理：事件模型（event model）中的两个 5</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%8F%90%E7%A4%BA\"><span class=\"toc-text\">提示</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E4%BA%8B%E4%BB%B6%E7%9A%84%E5%BA%94%E7%94%A8\"><span class=\"toc-text\">事件的应用</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%AE%9E%E4%BE%8B%E6%BC%94%E7%A4%BA\"><span class=\"toc-text\">实例演示</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E4%BA%8B%E4%BB%B6%E6%A8%A1%E5%9E%8B%E7%9A%84%E4%BA%94%E4%B8%AA%E7%BB%84%E6%88%90%E9%83%A8%E5%88%86\"><span class=\"toc-text\">事件模型的五个组成部分</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%B3%A8%E6%84%8F\"><span class=\"toc-text\">注意</span></a></li></ol></li></ol></li></ol>","author":{"name":"时雨","slug":"blog-author","avatar":"https://s2.loli.net/2024/01/28/mshkqWEFbd1xBIU.jpg","link":"/","description":"特别鸣谢你制造更欢乐的我<p>Yesterday is history</p><p>Tomorrow is mystery</p><p>Today is a gift</p>","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"hidden":false,"prev_post":{},"next_post":{"title":"参数","uid":"e9b6cce2ce6d201168276865751c9288","slug":"canshu","date":"2024-01-28T10:13:14.000Z","updated":"2024-01-30T09:05:19.373Z","comments":true,"path":"api/articles/canshu.json","keywords":null,"cover":"https://s2.loli.net/2024/01/30/S39KiDb65lHyuLQ.jpg","text":"传值，引用，数组，具名，可选参数，扩展方法方法参数 传值参数：不带修饰符的形参，一个值形参对应一个局部变量，初始值来自该方法调用所提供的相应实参 传值类型传进来...","permalink":"/post/canshu","photos":[],"count_time":{"symbolsCount":"4.1k","symbolsTime":"4 mins."},"categories":[{"name":"编程","slug":"编程","count":3,"path":"api/categories/编程.json"}],"tags":[{"name":"C#","slug":"C","count":3,"path":"api/tags/C.json"}],"author":{"name":"时雨","slug":"blog-author","avatar":"https://s2.loli.net/2024/01/28/mshkqWEFbd1xBIU.jpg","link":"/","description":"特别鸣谢你制造更欢乐的我<p>Yesterday is history</p><p>Tomorrow is mystery</p><p>Today is a gift</p>","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"feature":true}}