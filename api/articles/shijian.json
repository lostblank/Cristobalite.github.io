{"title":"事件","uid":"9dbfb0ceb333a8d9adfdccfe0f20148d","slug":"shijian","date":"2023-10-28T13:28:20.000Z","updated":"2024-02-17T09:15:54.549Z","comments":true,"path":"api/articles/shijian.json","keywords":null,"cover":"https://s2.loli.net/2024/01/30/YaNjJU3yVDiXbsw.png","content":"<h1 id=\"事件\"><a href=\"#事件\" class=\"headerlink\" title=\"事件\"></a>事件</h1><hr>\n<h2 id=\"定义\"><a href=\"#定义\" class=\"headerlink\" title=\"定义\"></a>定义</h2><p>Event，事件，即 能够发生什么的什么事情</p>\n<h2 id=\"角色\"><a href=\"#角色\" class=\"headerlink\" title=\"角色\"></a>角色</h2><p>事件是一种使对象或类能够提供通知的成员</p>\n<p>对象x拥有一个事件y ，想表达的思想是 ： 当事件y发生时，x有能力通知别的对象</p>\n<h2 id=\"使用：用于对象或类间的动作协调与信息传递（消息推送）\"><a href=\"#使用：用于对象或类间的动作协调与信息传递（消息推送）\" class=\"headerlink\" title=\"使用：用于对象或类间的动作协调与信息传递（消息推送）\"></a>使用：用于对象或类间的动作协调与信息传递（消息推送）</h2><h2 id=\"原理：事件模型（event-model）中的两个-5\"><a href=\"#原理：事件模型（event-model）中的两个-5\" class=\"headerlink\" title=\"原理：事件模型（event model）中的两个 5\"></a>原理：事件模型（event model）中的两个 5</h2><p>发生——响应中的五个部分——闹钟响了你起床、孩子饿了你做饭。。。这里隐含这 订阅 关系</p>\n<p>发生——响应中的五个动作：</p>\n<ol>\n<li>我有一个事件</li>\n<li>一个人或者一群人关心我这个事件</li>\n<li>我的这个事件发生了</li>\n<li>关心这个事件的人会被依次通知到</li>\n<li>被通知到的人根据拿到的事件信息（又称事件数据、事件参数、通知）对事件进行响应（又称 处理事件）</li>\n</ol>\n<p>事件订阅者、事件参数</p>\n<h2 id=\"提示\"><a href=\"#提示\" class=\"headerlink\" title=\"提示\"></a>提示</h2><ul>\n<li>事件多用于桌面、手机等开发的客户端编程、因为这些程序经常是用户通过事件来驱动的</li>\n<li>各种编程语言对这个机制的实现方法也不尽相同</li>\n<li>Java里面没有事件这种成员，也没有委托这种数据类型，Java的事件是通过接口来实现的</li>\n<li>MVC、MVP、MVVM等模式是事件模式更高级、更有效的玩法</li>\n<li>日常开发的时候，使用已有时间的机会比较多，自己声明事件的机会比较少</li>\n<li>事件的功能&#x3D;通知+可选的事件参数（即详细信息）</li>\n</ul>\n<hr>\n<h1 id=\"事件的应用\"><a href=\"#事件的应用\" class=\"headerlink\" title=\"事件的应用\"></a>事件的应用</h1><h2 id=\"实例演示\"><a href=\"#实例演示\" class=\"headerlink\" title=\"实例演示\"></a>实例演示</h2><p>派生（继承）与扩展（extends）</p>\n<figure class=\"highlight c#\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">using</span> System;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System.Collections.Generic;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System.Linq;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System.Text;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System.Threading.Tasks;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System.Windows.Forms;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">namespace</span> <span class=\"title\">Event</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">class</span> <span class=\"title\">Program</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">Main</span>(<span class=\"params\"><span class=\"built_in\">string</span>[] args</span>)</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 创建 MyForm 对象</span></span><br><span class=\"line\">            MyForm form = <span class=\"keyword\">new</span> MyForm();</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">// 订阅 Click 事件，当窗体单击时，调用 FormClicked 方法</span></span><br><span class=\"line\">            form.Click += form.FormClicked;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">// 显示窗体</span></span><br><span class=\"line\">            form.ShowDialog();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 自定义窗体类，继承自 Form</span></span><br><span class=\"line\">        <span class=\"keyword\">class</span> <span class=\"title\">MyForm</span> : <span class=\"title\">Form</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 事件处理方法，当窗体被单击时调用</span></span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">internal</span> <span class=\"keyword\">void</span> <span class=\"title\">FormClicked</span>(<span class=\"params\"><span class=\"built_in\">object</span> sender, EventArgs e</span>)</span></span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"comment\">// 将当前时间设置为窗体标题</span></span><br><span class=\"line\">                <span class=\"keyword\">this</span>.Text = DateTime.Now.ToString();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"事件模型的五个组成部分\"><a href=\"#事件模型的五个组成部分\" class=\"headerlink\" title=\"事件模型的五个组成部分\"></a>事件模型的五个组成部分</h2><ol>\n<li>事件的拥有者（event source，对象）</li>\n<li>事件的成员（event ，成员）</li>\n<li>事件的响应者（event subscriber,对象）</li>\n<li>事件处理器（event handler,成员）——本质上是一个回调方法</li>\n<li>事件订阅器——把事件处理器与事件关联在一起，本质上是一种以委托类型为基础的“约定”</li>\n</ol>\n<h2 id=\"注意\"><a href=\"#注意\" class=\"headerlink\" title=\"注意\"></a>注意</h2><ul>\n<li>事件处理器是方法成员</li>\n<li>挂接事件处理器的时候，可以使用委托实例，也可以直接使用方法名，这是个语法糖</li>\n<li>事件处理器对事件的订阅不是随意的，匹配与否声明事件时所使用的委托类型来检测</li>\n<li>事件可以同步调用也可以异步调用</li>\n<li>事件不会主动发生，一定是由事件拥有者的内部逻辑所触发的</li>\n</ul>\n<hr>\n<h1 id=\"事件的声明\"><a href=\"#事件的声明\" class=\"headerlink\" title=\"事件的声明\"></a>事件的声明</h1><p>完整声明</p>\n<figure class=\"highlight c#\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">using</span> System;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System.Threading.Tasks;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">namespace</span> <span class=\"title\">Event2</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">class</span> <span class=\"title\">Program</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">Main</span>(<span class=\"params\"><span class=\"built_in\">string</span>[] args</span>)</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 创建顾客对象和服务员对象</span></span><br><span class=\"line\">            Customer customer = <span class=\"keyword\">new</span> Customer();</span><br><span class=\"line\">            Waiter waiter = <span class=\"keyword\">new</span> Waiter();</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">// 顾客订阅服务员的处理方法</span></span><br><span class=\"line\">            customer.Order += waiter.Action;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">// 顾客开始用餐流程</span></span><br><span class=\"line\">            customer.Action();</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">// 顾客支付账单</span></span><br><span class=\"line\">            customer.PayTheBill();</span><br><span class=\"line\">        &#125; </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 订单事件参数类，用于传递点餐信息</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">OrderEventArgs</span> : <span class=\"title\">EventArgs</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"built_in\">string</span> DishName &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125; <span class=\"comment\">// 菜品名称</span></span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"built_in\">string</span> Size &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125; <span class=\"comment\">// 菜品大小</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 订单事件处理委托</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"built_in\">delegate</span> <span class=\"keyword\">void</span> <span class=\"title\">OrderEventHandler</span>(<span class=\"params\">Customer customer, OrderEventArgs e</span>)</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 顾客类</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">Customer</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">private</span> OrderEventHandler orderEventHandler;</span><br><span class=\"line\">        <span class=\"comment\">//简略声明方法</span></span><br><span class=\"line\">        <span class=\"comment\">//public event OrderEventHandler Order;</span></span><br><span class=\"line\">        <span class=\"comment\">// 事件定义，用于处理订单</span></span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"keyword\">event</span> OrderEventHandler Order </span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">add</span></span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"keyword\">this</span>.orderEventHandler += <span class=\"keyword\">value</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">remove</span></span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"keyword\">this</span>.orderEventHandler -= <span class=\"keyword\">value</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"built_in\">double</span> Bill &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125; <span class=\"comment\">// 顾客账单</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 顾客支付账单的方法</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">PayTheBill</span>()</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            Console.WriteLine(<span class=\"string\">&quot;I will pay $&#123;0&#125;&quot;</span>, <span class=\"keyword\">this</span>.Bill);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 顾客进入餐厅的方法</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">Walkin</span>()</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            Console.WriteLine(<span class=\"string\">&quot;Walk into the restaurant.&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 顾客坐下的方法</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">SitDown</span>()</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            Console.WriteLine(<span class=\"string\">&quot;Sit down&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 顾客思考点餐的方法</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">Think</span>()</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"built_in\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">5</span>; i++)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                Console.WriteLine(<span class=\"string\">&quot;Let me think ...&quot;</span>);</span><br><span class=\"line\">                Task.Delay(<span class=\"number\">1000</span>).Wait();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">// 当顾客思考完毕后，通过事件通知服务员点餐</span></span><br><span class=\"line\">            <span class=\"keyword\">this</span>.OnOrder(<span class=\"string\">&quot;Chicken&quot;</span>, <span class=\"string\">&quot;large&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 触发订单事件的方法</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">OnOrder</span>(<span class=\"params\"><span class=\"built_in\">string</span> dishName, <span class=\"built_in\">string</span> size</span>)</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.orderEventHandler != <span class=\"literal\">null</span>)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"comment\">// 创建订单事件参数</span></span><br><span class=\"line\">                OrderEventArgs e = <span class=\"keyword\">new</span> OrderEventArgs();</span><br><span class=\"line\">                e.DishName = dishName;</span><br><span class=\"line\">                e.Size = size;</span><br><span class=\"line\">                </span><br><span class=\"line\">                <span class=\"comment\">// 调用订阅的事件处理方法</span></span><br><span class=\"line\">                <span class=\"keyword\">this</span>.orderEventHandler.Invoke(<span class=\"keyword\">this</span>, e);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 顾客整个用餐过程的方法</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">Action</span>()</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            Console.ReadLine(); <span class=\"comment\">// 等待输入，模拟开始用餐</span></span><br><span class=\"line\">            <span class=\"keyword\">this</span>.Walkin();</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.SitDown();</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.Think();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 服务员类</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">Waiter</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 服务员处理订单的方法</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">Action</span>(<span class=\"params\">Customer customer, OrderEventArgs e</span>)</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            Console.WriteLine(<span class=\"string\">&quot;I will serve you the dish - &#123;0&#125;&quot;</span>, e.DishName);</span><br><span class=\"line\">            <span class=\"built_in\">double</span> price = <span class=\"number\">10</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">// 根据菜品大小调整价格</span></span><br><span class=\"line\">            <span class=\"keyword\">switch</span> (e.Size)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"keyword\">case</span> <span class=\"string\">&quot;small&quot;</span>:</span><br><span class=\"line\">                    price *= <span class=\"number\">0.5</span>;</span><br><span class=\"line\">                    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                <span class=\"keyword\">case</span> <span class=\"string\">&quot;large&quot;</span>:</span><br><span class=\"line\">                    price *= <span class=\"number\">1.5</span>;</span><br><span class=\"line\">                    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                <span class=\"literal\">default</span>:</span><br><span class=\"line\">                    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">// 将价格添加到顾客的账单中</span></span><br><span class=\"line\">            customer.Bill += price;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>简略声明（字段式声明，field-like）</p>\n<figure class=\"highlight c#\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">event</span> OrderEventHandler Order;</span><br></pre></td></tr></table></figure>\n\n<p>对应的触发事件时要更改为使用<strong>this.order.invoke();</strong></p>\n<h2 id=\"有了委托字段-属性，为什么还需要事件\"><a href=\"#有了委托字段-属性，为什么还需要事件\" class=\"headerlink\" title=\"有了委托字段&#x2F;属性，为什么还需要事件\"></a>有了委托字段&#x2F;属性，为什么还需要事件</h2><p>为了程序的逻辑更加有道理，更加安全，谨防借刀杀人</p>\n<h2 id=\"所以事件的本质是委托字段的一个包装器\"><a href=\"#所以事件的本质是委托字段的一个包装器\" class=\"headerlink\" title=\"所以事件的本质是委托字段的一个包装器\"></a>所以事件的本质是委托字段的一个包装器</h2><p>这个包装器对委托字段的访问起限制作用，相当于一个蒙板</p>\n<p>封装（encapsulation）的一个重要功能就是隐藏</p>\n<p>事件对外界隐藏了委托实例的大部分功能，<strong>仅暴露添加&#x2F;移除事件处理器的功能</strong></p>\n<p>添加&#x2F;移除事件处理器的时候可以直接使用方法名，这是委托实例不具备的功能</p>\n<h2 id=\"用于声明事件的委托类型的命名约定\"><a href=\"#用于声明事件的委托类型的命名约定\" class=\"headerlink\" title=\"用于声明事件的委托类型的命名约定\"></a>用于声明事件的委托类型的命名约定</h2><p>用于声明Foo事件的委托，一般命名为<strong>FooEventHandler</strong>（除非是一个非常通用的事件约束）</p>\n<p>FooEventHandler委托的参数一般有两个（由Win32API演化而来，历史悠久）</p>\n<ul>\n<li>第一个是object类型，名字为sender，实际上就是事件的拥有者，事件的source</li>\n<li>第二个是EventArgs类的派生类，类名一般为FooEventArgs，参数名为e，也就是事件参数</li>\n<li>虽然没有官方的说法，但我们可以把委托的参数列表看做是事件发生后发送给事件响应者的<strong>事件消息</strong></li>\n</ul>\n<p>触发Foo事件的方法一般命名为OnFoo，即因何引发，事出有因</p>\n<ul>\n<li>访问级别为protected,不能为poublic，不然又可以借刀杀人了</li>\n</ul>\n<h2 id=\"事件的命名约定\"><a href=\"#事件的命名约定\" class=\"headerlink\" title=\"事件的命名约定\"></a>事件的命名约定</h2><p>带有时态的动词或者动词短语</p>\n<p>事件拥有者正在做什么事情，用进行时</p>\n<p>事件的拥有者做完了什么事情，用完成时</p>\n<h2 id=\"注意-1\"><a href=\"#注意-1\" class=\"headerlink\" title=\"注意\"></a>注意</h2><p>命名使用EventArgs时记得要使用其派生基类EventArgs</p>\n<figure class=\"highlight c#\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">OrderEventArgs</span>:<span class=\"title\">EventArgs</span></span><br></pre></td></tr></table></figure>\n\n<p>委托类型不要声明到其他类中，委托是一个数据类型，尽可能不要使用嵌套，与类平级</p>\n<p>一起使用的类需要保证其访问级别一致</p>\n<h2 id=\"事件与委托的关系\"><a href=\"#事件与委托的关系\" class=\"headerlink\" title=\"事件与委托的关系\"></a>事件与委托的关系</h2><h3 id=\"事件真的是“以特殊方式声明的委托字段-实例吗”\"><a href=\"#事件真的是“以特殊方式声明的委托字段-实例吗”\" class=\"headerlink\" title=\"事件真的是“以特殊方式声明的委托字段&#x2F;实例吗”\"></a>事件真的是“以特殊方式声明的委托字段&#x2F;实例吗”</h3><p>不是！只是声明的时候看起来像</p>\n<p>事件声明的时候使用了委托类型，简化声明造成事件看上去像一个委托字段（实例），而event关键字则更像是一个修饰符</p>\n<p>订阅事件的时候+&#x3D;操作符后面是一个委托实例，这与委托实例的赋值方法语法相同，这也让事件看起来像是一个委托字段，事实上并不是这样</p>\n<p>事件的本质是加装在委托字段上的一个蒙板（mask），是个起掩蔽作用的包装器，这个用于阻挡非法操作的蒙板绝不是委托字段本身</p>\n<h3 id=\"为什么要使用委托类型来声明事件\"><a href=\"#为什么要使用委托类型来声明事件\" class=\"headerlink\" title=\"为什么要使用委托类型来声明事件\"></a>为什么要使用委托类型来声明事件</h3><p>站在source的角度来看，它是一种约定，是为了表明source能对外传递哪些消息</p>\n<p>站在subsceiber的角度来看，它是一种约定，是为了约束能够使用什么样签名的方法来处理（响应）事件</p>\n<p>委托类型的实例将用于存储（引用）事件处理器</p>\n<h3 id=\"对比事件与属性\"><a href=\"#对比事件与属性\" class=\"headerlink\" title=\"对比事件与属性\"></a>对比事件与属性</h3><p>属性不是字段——很多时候属性是字段的包装器，这个包装器用来保护字段不被滥用</p>\n<p>事件不是委托字段——它是委托字段的包装器，这个包装器来保护委托字段不被滥用</p>\n<p>包装器是永远都不可能被包装的东西</p>\n","feature":true,"text":"事件 定义Event，事件，即 能够发生什么的什么事情 角色事件是一种使对象或类能够提供通知的成员 对象x拥有一个事件y ，想表达的思想是 ： 当事件y发生时，...","permalink":"/post/shijian","photos":[],"count_time":{"symbolsCount":"6.7k","symbolsTime":"6 mins."},"categories":[{"name":"编程","slug":"编程","count":3,"path":"api/categories/编程.json"}],"tags":[{"name":"C#","slug":"C","count":3,"path":"api/tags/C.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E4%BA%8B%E4%BB%B6\"><span class=\"toc-text\">事件</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%AE%9A%E4%B9%89\"><span class=\"toc-text\">定义</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E8%A7%92%E8%89%B2\"><span class=\"toc-text\">角色</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%BD%BF%E7%94%A8%EF%BC%9A%E7%94%A8%E4%BA%8E%E5%AF%B9%E8%B1%A1%E6%88%96%E7%B1%BB%E9%97%B4%E7%9A%84%E5%8A%A8%E4%BD%9C%E5%8D%8F%E8%B0%83%E4%B8%8E%E4%BF%A1%E6%81%AF%E4%BC%A0%E9%80%92%EF%BC%88%E6%B6%88%E6%81%AF%E6%8E%A8%E9%80%81%EF%BC%89\"><span class=\"toc-text\">使用：用于对象或类间的动作协调与信息传递（消息推送）</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%8E%9F%E7%90%86%EF%BC%9A%E4%BA%8B%E4%BB%B6%E6%A8%A1%E5%9E%8B%EF%BC%88event-model%EF%BC%89%E4%B8%AD%E7%9A%84%E4%B8%A4%E4%B8%AA-5\"><span class=\"toc-text\">原理：事件模型（event model）中的两个 5</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%8F%90%E7%A4%BA\"><span class=\"toc-text\">提示</span></a></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E4%BA%8B%E4%BB%B6%E7%9A%84%E5%BA%94%E7%94%A8\"><span class=\"toc-text\">事件的应用</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%AE%9E%E4%BE%8B%E6%BC%94%E7%A4%BA\"><span class=\"toc-text\">实例演示</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%BA%8B%E4%BB%B6%E6%A8%A1%E5%9E%8B%E7%9A%84%E4%BA%94%E4%B8%AA%E7%BB%84%E6%88%90%E9%83%A8%E5%88%86\"><span class=\"toc-text\">事件模型的五个组成部分</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%B3%A8%E6%84%8F\"><span class=\"toc-text\">注意</span></a></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E4%BA%8B%E4%BB%B6%E7%9A%84%E5%A3%B0%E6%98%8E\"><span class=\"toc-text\">事件的声明</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%9C%89%E4%BA%86%E5%A7%94%E6%89%98%E5%AD%97%E6%AE%B5-%E5%B1%9E%E6%80%A7%EF%BC%8C%E4%B8%BA%E4%BB%80%E4%B9%88%E8%BF%98%E9%9C%80%E8%A6%81%E4%BA%8B%E4%BB%B6\"><span class=\"toc-text\">有了委托字段&#x2F;属性，为什么还需要事件</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%89%80%E4%BB%A5%E4%BA%8B%E4%BB%B6%E7%9A%84%E6%9C%AC%E8%B4%A8%E6%98%AF%E5%A7%94%E6%89%98%E5%AD%97%E6%AE%B5%E7%9A%84%E4%B8%80%E4%B8%AA%E5%8C%85%E8%A3%85%E5%99%A8\"><span class=\"toc-text\">所以事件的本质是委托字段的一个包装器</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E7%94%A8%E4%BA%8E%E5%A3%B0%E6%98%8E%E4%BA%8B%E4%BB%B6%E7%9A%84%E5%A7%94%E6%89%98%E7%B1%BB%E5%9E%8B%E7%9A%84%E5%91%BD%E5%90%8D%E7%BA%A6%E5%AE%9A\"><span class=\"toc-text\">用于声明事件的委托类型的命名约定</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%BA%8B%E4%BB%B6%E7%9A%84%E5%91%BD%E5%90%8D%E7%BA%A6%E5%AE%9A\"><span class=\"toc-text\">事件的命名约定</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%B3%A8%E6%84%8F-1\"><span class=\"toc-text\">注意</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%BA%8B%E4%BB%B6%E4%B8%8E%E5%A7%94%E6%89%98%E7%9A%84%E5%85%B3%E7%B3%BB\"><span class=\"toc-text\">事件与委托的关系</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E4%BA%8B%E4%BB%B6%E7%9C%9F%E7%9A%84%E6%98%AF%E2%80%9C%E4%BB%A5%E7%89%B9%E6%AE%8A%E6%96%B9%E5%BC%8F%E5%A3%B0%E6%98%8E%E7%9A%84%E5%A7%94%E6%89%98%E5%AD%97%E6%AE%B5-%E5%AE%9E%E4%BE%8B%E5%90%97%E2%80%9D\"><span class=\"toc-text\">事件真的是“以特殊方式声明的委托字段&#x2F;实例吗”</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E4%B8%BA%E4%BB%80%E4%B9%88%E8%A6%81%E4%BD%BF%E7%94%A8%E5%A7%94%E6%89%98%E7%B1%BB%E5%9E%8B%E6%9D%A5%E5%A3%B0%E6%98%8E%E4%BA%8B%E4%BB%B6\"><span class=\"toc-text\">为什么要使用委托类型来声明事件</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%AF%B9%E6%AF%94%E4%BA%8B%E4%BB%B6%E4%B8%8E%E5%B1%9E%E6%80%A7\"><span class=\"toc-text\">对比事件与属性</span></a></li></ol></li></ol></li></ol>","author":{"name":"时雨","slug":"blog-author","avatar":"https://s2.loli.net/2024/01/28/mshkqWEFbd1xBIU.jpg","link":"/","description":"特别鸣谢你制造更欢乐的我<p>Yesterday is history</p><p>Tomorrow is mystery</p><p>Today is a gift</p>","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"hidden":false,"prev_post":{"title":"SQLSever基础","uid":"641632e2596cda11898ff146651ae4ce","slug":"SqlSever","date":"2023-11-18T13:28:20.000Z","updated":"2024-02-17T09:31:35.640Z","comments":true,"path":"api/articles/SqlSever.json","keywords":null,"cover":"https://smms.app/image/4MbfVDKdrzgoIeS","text":"SqlSever基础建库使用ssms建立数据库主要数据文件：*.mdf 日志文件：*.ldf 次要数据文件：*.ndf 使用sql语句建立数据库使用创建关键字c...","permalink":"/post/SqlSever","photos":[],"count_time":{"symbolsCount":"6.2k","symbolsTime":"6 mins."},"categories":[{"name":"数据库","slug":"数据库","count":1,"path":"api/categories/数据库.json"}],"tags":[{"name":"SqlSever","slug":"SqlSever","count":1,"path":"api/tags/SqlSever.json"}],"author":{"name":"时雨","slug":"blog-author","avatar":"https://s2.loli.net/2024/01/28/mshkqWEFbd1xBIU.jpg","link":"/","description":"特别鸣谢你制造更欢乐的我<p>Yesterday is history</p><p>Tomorrow is mystery</p><p>Today is a gift</p>","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"feature":true},"next_post":{"title":"委托","uid":"c31509689845d3f9a7357a64a02fc66b","slug":"weituo","date":"2023-10-28T10:13:13.000Z","updated":"2024-02-17T09:21:30.801Z","comments":true,"path":"api/articles/weituo.json","keywords":null,"cover":"https://s2.loli.net/2024/01/29/f42QuwqljemYs9c.jpg","text":"委托 什么是委托委托（delegate）是函数指针的升级版 一切皆地址 变量（数据）是某个地址为起点的一段内存中存储的值 函数（算法）是某个地址为起点的一段内存...","permalink":"/post/weituo","photos":[],"count_time":{"symbolsCount":"14k","symbolsTime":"13 mins."},"categories":[{"name":"编程","slug":"编程","count":3,"path":"api/categories/编程.json"}],"tags":[{"name":"C#","slug":"C","count":3,"path":"api/tags/C.json"}],"author":{"name":"时雨","slug":"blog-author","avatar":"https://s2.loli.net/2024/01/28/mshkqWEFbd1xBIU.jpg","link":"/","description":"特别鸣谢你制造更欢乐的我<p>Yesterday is history</p><p>Tomorrow is mystery</p><p>Today is a gift</p>","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"feature":true}}