{"title":"参数","uid":"e9b6cce2ce6d201168276865751c9288","slug":"canshu","date":"2024-01-28T10:13:14.000Z","updated":"2024-02-07T09:05:04.640Z","comments":true,"path":"api/articles/canshu.json","keywords":null,"cover":"https://s2.loli.net/2024/01/30/S39KiDb65lHyuLQ.jpg","content":"<h1 id=\"传值，引用，数组，具名，可选参数，扩展方法\"><a href=\"#传值，引用，数组，具名，可选参数，扩展方法\" class=\"headerlink\" title=\"传值，引用，数组，具名，可选参数，扩展方法\"></a>传值，引用，数组，具名，可选参数，扩展方法</h1><hr>\n<h2 id=\"方法参数\"><a href=\"#方法参数\" class=\"headerlink\" title=\"方法参数\"></a>方法参数</h2><p>传值参数：不带修饰符的形参，一个值形参对应一个局部变量，初始值来自该方法调用所提供的相应实参</p>\n<p>传值类型传进来的是一个副本，不会改变原来变量的值</p>\n<p>引用类型的变量存储的是一个地址，在赋值后，传值参数会得到一个新值并创建一个新的对象</p>\n<ul>\n<li><p>值参数创建变量的副本</p>\n<p>对值参数的操作永远不影响变量的值</p>\n</li>\n<li><p>使用 GetHashCode()方法可以区分同名但来自不同方法的值</p>\n</li>\n</ul>\n<p>引用参数：用ref修饰的形参，引用形参并不创建新的存储位置，其表示的存储位置恰是在方法中作为实参给出的变量所表示的存储位置</p>\n<ul>\n<li>引用参数并不创建变量的副本</li>\n<li>使用ref修饰符显式指出:     此方法的副作用是改变实际参数的值</li>\n</ul>\n<h2 id=\"输出形参\"><a href=\"#输出形参\" class=\"headerlink\" title=\"输出形参\"></a>输出形参</h2><ul>\n<li><p>用out修饰符声明的形参是输出形参，输出形参不创建新的存储位置</p>\n</li>\n<li><p>在方法返回前，该方法的每个输出形参都必须明确赋值</p>\n</li>\n<li><p>用out修饰符显式指出： 此方法的副作用是通过参数向外输出值</p>\n</li>\n<li><p>ref是为了改变，out是为了输出</p>\n</li>\n<li><p>声明带输出参数的方法</p>\n<figure class=\"highlight c#\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">using</span> System;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">namespace</span> <span class=\"title\">Parser</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\"> <span class=\"keyword\">class</span> <span class=\"title\">Program</span></span><br><span class=\"line\"> &#123;</span><br><span class=\"line\">     <span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">Main</span>(<span class=\"params\"><span class=\"built_in\">string</span>[] args</span>)</span></span><br><span class=\"line\">     &#123;</span><br><span class=\"line\">         <span class=\"comment\">// 初始化一个 double 类型的变量 x</span></span><br><span class=\"line\">         <span class=\"built_in\">double</span> x = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">         <span class=\"comment\">// 尝试解析字符串 &quot;798&quot; 为 double 类型，并将结果存储在 x 中</span></span><br><span class=\"line\">         <span class=\"built_in\">bool</span> b = DoubleParser.TryParse(<span class=\"string\">&quot;798&quot;</span>, <span class=\"keyword\">out</span> x);</span><br><span class=\"line\"></span><br><span class=\"line\">         <span class=\"comment\">// 检查解析是否成功</span></span><br><span class=\"line\">         <span class=\"keyword\">if</span> (b == <span class=\"literal\">true</span>)</span><br><span class=\"line\">         &#123;</span><br><span class=\"line\">             <span class=\"comment\">// 如果成功，输出解析结果加1</span></span><br><span class=\"line\">             Console.WriteLine(x + <span class=\"number\">1</span>);</span><br><span class=\"line\">         &#125;</span><br><span class=\"line\">         <span class=\"keyword\">else</span></span><br><span class=\"line\">         &#123;</span><br><span class=\"line\">             <span class=\"comment\">// 如果解析失败，输出错误信息</span></span><br><span class=\"line\">             Console.WriteLine(<span class=\"string\">&quot;解析失败&quot;</span>);</span><br><span class=\"line\">         &#125;</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">     <span class=\"comment\">// 自定义 DoubleParser 类，用于解析字符串为 double 类型</span></span><br><span class=\"line\">     <span class=\"keyword\">class</span> <span class=\"title\">DoubleParser</span></span><br><span class=\"line\">     &#123;</span><br><span class=\"line\">         <span class=\"comment\">// 静态方法，尝试将输入字符串解析为 double 类型</span></span><br><span class=\"line\">         <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"built_in\">bool</span> <span class=\"title\">TryParse</span>(<span class=\"params\"><span class=\"built_in\">string</span> input, <span class=\"keyword\">out</span> <span class=\"built_in\">double</span> result</span>)</span></span><br><span class=\"line\">         &#123;</span><br><span class=\"line\">             <span class=\"keyword\">try</span></span><br><span class=\"line\">             &#123;</span><br><span class=\"line\">                 <span class=\"comment\">// 使用 double.Parse 尝试解析字符串，并将结果赋值给 result</span></span><br><span class=\"line\">                 result = <span class=\"built_in\">double</span>.Parse(input);</span><br><span class=\"line\">                 <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">             &#125;</span><br><span class=\"line\">             <span class=\"keyword\">catch</span></span><br><span class=\"line\">             &#123;</span><br><span class=\"line\">                 <span class=\"comment\">// 如果解析失败，将 result 设为默认值 0，并返回 false</span></span><br><span class=\"line\">                 result = <span class=\"number\">0</span>;</span><br><span class=\"line\">                 <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">             &#125;</span><br><span class=\"line\">         &#125;</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></li>\n</ul>\n<h2 id=\"数组参数\"><a href=\"#数组参数\" class=\"headerlink\" title=\"数组参数\"></a>数组参数</h2><p>必需是形参列表中的最后一个，由params修饰</p>\n<p>举例：String.Format方法和String.Split方法</p>\n<figure class=\"highlight c#\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">using</span> System;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System.Collections.Generic;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System.Linq;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System.Text;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System.Threading.Tasks;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">namespace</span> @<span class=\"title\">params</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">class</span> <span class=\"title\">Program</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">Main</span>(<span class=\"params\"><span class=\"built_in\">string</span>[] args</span>)</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"built_in\">int</span> result = CalculateSum(<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>);</span><br><span class=\"line\">            Console.WriteLine(result);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">static</span> <span class=\"built_in\">int</span> <span class=\"title\">CalculateSum</span>(<span class=\"params\"><span class=\"keyword\">params</span> <span class=\"built_in\">int</span>[] intArray</span>)</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"built_in\">int</span> sum = <span class=\"number\">0</span>;</span><br><span class=\"line\">            <span class=\"keyword\">foreach</span>(<span class=\"keyword\">var</span> item <span class=\"keyword\">in</span> intArray)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                sum += item;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> sum;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<hr>\n<figure class=\"highlight c#\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">Main</span>(<span class=\"params\"><span class=\"built_in\">string</span>[] args</span>)</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"built_in\">string</span> str = <span class=\"string\">&quot;tim;tom,amy.lisa&quot;</span>;</span><br><span class=\"line\">            <span class=\"built_in\">string</span>[] result = str.Split(<span class=\"string\">&#x27;;&#x27;</span>, <span class=\"string\">&#x27;.&#x27;</span>, <span class=\"string\">&#x27;,&#x27;</span>);</span><br><span class=\"line\">            <span class=\"keyword\">foreach</span> (<span class=\"keyword\">var</span> name <span class=\"keyword\">in</span> result)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                Console.WriteLine(name);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"具名参数\"><a href=\"#具名参数\" class=\"headerlink\" title=\"具名参数\"></a>具名参数</h2><p>参数的位置不再受到约束</p>\n<p>并非参数的某个种类，而是参数的使用方法</p>\n<figure class=\"highlight c#\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">Main</span>(<span class=\"params\"><span class=\"built_in\">string</span>[] args</span>)</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            PrintInfo(age:<span class=\"number\">18</span>, name: <span class=\"string\">&quot;tim&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">PrintInfo</span>(<span class=\"params\"><span class=\"built_in\">string</span> name,<span class=\"built_in\">int</span> age</span>)</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            Console.WriteLine(<span class=\"string\">&quot;hello&#123;0&#125;,you are &#123;1&#125;&quot;</span>,name,age);</span><br><span class=\"line\">        &#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"可选参数\"><a href=\"#可选参数\" class=\"headerlink\" title=\"可选参数\"></a>可选参数</h2><p>参数因为带有默认值而变得可选</p>\n<p>不推荐使用可选参数</p>\n<h2 id=\"扩展方法（this参数）\"><a href=\"#扩展方法（this参数）\" class=\"headerlink\" title=\"扩展方法（this参数）\"></a>扩展方法（this参数）</h2><ul>\n<li><p>方法必需是公有，静态的，即被public static所修饰</p>\n</li>\n<li><p>必需是形参列表中的第一个，由this修饰</p>\n</li>\n<li><p>必需由一个静态类（一般类名为SomeTypeExtension）来统一收纳对SomeType类型的扩展方法</p>\n</li>\n<li><p>举例：LINQ方法（语言集成查询）</p>\n<figure class=\"highlight c#\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">using</span> System;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System.Collections.Generic;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System.Linq;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System.Text;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System.Threading.Tasks;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">namespace</span> <span class=\"title\">Linq</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">class</span> <span class=\"title\">Program</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">Main</span>(<span class=\"params\"><span class=\"built_in\">string</span>[] args</span>)</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            List&lt;<span class=\"built_in\">int</span>&gt; myList = <span class=\"keyword\">new</span> List&lt;<span class=\"built_in\">int</span>&gt;() &#123; <span class=\"number\">11</span>, <span class=\"number\">12</span>, <span class=\"number\">13</span>, <span class=\"number\">14</span>, <span class=\"number\">15</span> &#125;;</span><br><span class=\"line\">            <span class=\"built_in\">bool</span> result = myList.All(i =&gt; i &gt; <span class=\"number\">10</span>);          <span class=\"comment\">//All是扩展方法</span></span><br><span class=\"line\">            Console.WriteLine(result);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">static</span> <span class=\"built_in\">bool</span> <span class=\"title\">AllGreaterThanTen</span>(<span class=\"params\">List&lt;<span class=\"built_in\">int</span>&gt;intList</span>)</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">foreach</span> (<span class=\"keyword\">var</span> item <span class=\"keyword\">in</span> intList)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (item&lt;=<span class=\"number\">10</span>)</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></li>\n</ul>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><ol>\n<li>传值参数：参数的默认传递方式</li>\n<li>输出参数：用于除返回值外还需要输出的场景</li>\n<li>引用参数：用于需要修改实际参数数值的场景</li>\n<li>数组参数：用于简化方法的调用</li>\n<li>具名参数：提高可读性</li>\n<li>可选参数：参数拥有默认值</li>\n<li>扩展方法(this参数)：为目标数据类型追加方法</li>\n</ol>\n","feature":true,"text":"传值，引用，数组，具名，可选参数，扩展方法 方法参数传值参数：不带修饰符的形参，一个值形参对应一个局部变量，初始值来自该方法调用所提供的相应实参 传值类型传进来...","permalink":"/post/canshu","photos":[],"count_time":{"symbolsCount":"4.1k","symbolsTime":"4 mins."},"categories":[{"name":"编程","slug":"编程","count":3,"path":"api/categories/编程.json"}],"tags":[{"name":"C#","slug":"C","count":3,"path":"api/tags/C.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E4%BC%A0%E5%80%BC%EF%BC%8C%E5%BC%95%E7%94%A8%EF%BC%8C%E6%95%B0%E7%BB%84%EF%BC%8C%E5%85%B7%E5%90%8D%EF%BC%8C%E5%8F%AF%E9%80%89%E5%8F%82%E6%95%B0%EF%BC%8C%E6%89%A9%E5%B1%95%E6%96%B9%E6%B3%95\"><span class=\"toc-text\">传值，引用，数组，具名，可选参数，扩展方法</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%96%B9%E6%B3%95%E5%8F%82%E6%95%B0\"><span class=\"toc-text\">方法参数</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E8%BE%93%E5%87%BA%E5%BD%A2%E5%8F%82\"><span class=\"toc-text\">输出形参</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%95%B0%E7%BB%84%E5%8F%82%E6%95%B0\"><span class=\"toc-text\">数组参数</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%85%B7%E5%90%8D%E5%8F%82%E6%95%B0\"><span class=\"toc-text\">具名参数</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%8F%AF%E9%80%89%E5%8F%82%E6%95%B0\"><span class=\"toc-text\">可选参数</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%89%A9%E5%B1%95%E6%96%B9%E6%B3%95%EF%BC%88this%E5%8F%82%E6%95%B0%EF%BC%89\"><span class=\"toc-text\">扩展方法（this参数）</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%80%BB%E7%BB%93\"><span class=\"toc-text\">总结</span></a></li></ol></li></ol>","author":{"name":"时雨","slug":"blog-author","avatar":"https://s2.loli.net/2024/01/28/mshkqWEFbd1xBIU.jpg","link":"/","description":"特别鸣谢你制造更欢乐的我<p>Yesterday is history</p><p>Tomorrow is mystery</p><p>Today is a gift</p>","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"hidden":false,"prev_post":{"title":"事件","uid":"9dbfb0ceb333a8d9adfdccfe0f20148d","slug":"shijian","date":"2024-01-28T13:28:20.000Z","updated":"2024-02-07T09:03:48.875Z","comments":true,"path":"api/articles/shijian.json","keywords":null,"cover":"https://s2.loli.net/2024/01/30/YaNjJU3yVDiXbsw.png","text":"事件 定义Event，事件，即 能够发生什么的什么事情 角色事件是一种使对象或类能够提供通知的成员 对象x拥有一个事件y ，想表达的思想是 ： 当事件y发生时，...","permalink":"/post/shijian","photos":[],"count_time":{"symbolsCount":"1.7k","symbolsTime":"2 mins."},"categories":[{"name":"编程","slug":"编程","count":3,"path":"api/categories/编程.json"}],"tags":[{"name":"C#","slug":"C","count":3,"path":"api/tags/C.json"}],"author":{"name":"时雨","slug":"blog-author","avatar":"https://s2.loli.net/2024/01/28/mshkqWEFbd1xBIU.jpg","link":"/","description":"特别鸣谢你制造更欢乐的我<p>Yesterday is history</p><p>Tomorrow is mystery</p><p>Today is a gift</p>","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"feature":true},"next_post":{"title":"委托","uid":"c31509689845d3f9a7357a64a02fc66b","slug":"weituo","date":"2024-01-28T10:13:13.000Z","updated":"2024-02-07T09:02:47.482Z","comments":true,"path":"api/articles/weituo.json","keywords":null,"cover":"https://s2.loli.net/2024/01/29/f42QuwqljemYs9c.jpg","text":"委托 什么是委托 委托（delegate）是函数指针的升级版 一切皆地址 变量（数据）是某个地址为起点的一段内存中存储的值 函数（算法）是某个地址为起点的一段内...","permalink":"/post/weituo","photos":[],"count_time":{"symbolsCount":"14k","symbolsTime":"13 mins."},"categories":[{"name":"编程","slug":"编程","count":3,"path":"api/categories/编程.json"}],"tags":[{"name":"C#","slug":"C","count":3,"path":"api/tags/C.json"}],"author":{"name":"时雨","slug":"blog-author","avatar":"https://s2.loli.net/2024/01/28/mshkqWEFbd1xBIU.jpg","link":"/","description":"特别鸣谢你制造更欢乐的我<p>Yesterday is history</p><p>Tomorrow is mystery</p><p>Today is a gift</p>","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"feature":true}}